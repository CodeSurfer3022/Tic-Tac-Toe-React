{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","length","slice","calculateWinner","setState","concat","status","winner","handleClick","lines","a","b","c","ReactDom","render","document","querySelector"],"mappings":"2PAIA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAY,SAASC,QAAWF,EAAME,SACzCF,EAAMG,O,IAKbC,E,2KACWC,GAAI,IAAD,OACZ,OACI,kBAACN,EAAD,CAAQI,MAASG,KAAKN,MAAMO,QAAQF,GAAIH,QAAW,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAIhF,OACI,6BACI,yBAAKJ,UAAY,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAY,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAY,aACZK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GAtBnBC,IAAMC,WA6BpBC,E,kDACF,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAS,CAAC,CACNN,QAASO,MAAM,GAAGC,KAAK,QAE3BC,SAAS,GANE,E,wDASPX,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAErBN,EADUM,EAAQA,EAAQI,OAAS,GACjBV,QAAQW,QAE7BC,EAAgBZ,IAAYA,EAAQF,KAEvCE,EAAQF,GAAKC,KAAKM,MAAMI,QAAU,IAAM,IACxCV,KAAKc,SAAS,CACVP,QAASA,EAAQQ,OAAO,CACpB,CAACd,QAASA,KAEdS,SAAUV,KAAKM,MAAMI,a,+BAGnB,IAMFM,EANC,OACCT,EAAUP,KAAKM,MAAMC,QAErBN,EADUM,EAAQA,EAAQI,OAAS,GACjBV,QAClBgB,EAASJ,EAAgBZ,GAS/B,OALIe,EADDC,EACU,WAAaA,EAEb,iBAAmBjB,KAAKM,MAAMI,QAAU,IAAM,KAIvD,yBAAKf,UAAW,QACZ,kBAACG,EAAD,CAAOG,QAAWA,EAASL,QAAW,SAACG,GAAD,OAAO,EAAKmB,YAAYnB,MAC9D,yBAAKJ,UAAY,aACb,yBAAKA,UAAY,UAAUqB,GAC3B,mC,GA3CDb,IAAMC,WAkDzB,SAASS,EAAgBZ,GAWrB,IAVA,IAAMkB,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFpB,EAAI,EAAGA,EAAIoB,EAAMR,OAAQZ,IAAK,CAAC,IAAD,cACjBoB,EAAMpB,GADW,GAC5BqB,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAIrB,EAAQmB,IAAMnB,EAAQmB,KAAOnB,EAAQoB,IAAMpB,EAAQmB,KAAOnB,EAAQqB,GAClE,OAAOrB,EAAQmB,GAGvB,OAAO,KAGXG,IAASC,OAAO,kBAACnB,EAAD,MAAUoB,SAASC,cAAc,Y","file":"static/js/main.4dfa9504.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\nimport './index.css';\n\nfunction Square(props){\n    return (\n        <button className = 'square' onClick = {props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square value = {this.props.squares[i]} onClick = {() => this.props.onClick(i)}/>\n        );\n    }\n    render() {\n        return(\n            <div>\n                <div className = \"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className = \"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className = \"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(9).fill(null)\n            }],\n            xIsNext: true\n        };\n    }\n    handleClick(i) {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        if(calculateWinner(squares) || squares[i]) return;\n\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([\n                {squares: squares}\n            ]),\n            xIsNext: !this.state.xIsNext\n        });\n    }\n    render() {\n        const history = this.state.history;\n        const current = history[history.length - 1];\n        const squares = current.squares;\n        const winner = calculateWinner(squares);\n\n        let status;\n        if(winner) {\n            status = 'Winner: ' + winner;\n        } else {\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n        }\n\n        return(\n            <div className ='game'>\n                <Board squares = {squares} onClick = {(i) => this.handleClick(i)}/>\n                <div className = 'game-info'>\n                    <div className = 'status'>{status}</div>\n                    <ol>{/**/}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n\nReactDom.render(<Game />, document.querySelector('#root'));"],"sourceRoot":""}